{"ast":null,"code":"var _jsxFileName = \"C:\\\\webabdan\\\\apps\\\\src\\\\rip\\\\Ripple.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useLayoutEffect } from \"react\";\nimport { RippleContainer } from \"./Ripple.styled\";\nimport PropTypes from \"prop-types\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst useDebouncedRippleCleanUp = (rippleCount, duration, cleanUpFunction) => {\n  _s();\n\n  useLayoutEffect(() => {\n    let bounce = null;\n\n    if (rippleCount > 0) {\n      clearTimeout(bounce);\n      bounce = setTimeout(() => {\n        cleanUpFunction();\n        clearTimeout(bounce);\n      }, duration * 4);\n    }\n\n    return () => clearTimeout(bounce);\n  }, [rippleCount, duration, cleanUpFunction]);\n};\n\n_s(useDebouncedRippleCleanUp, \"n7/vCynhJvM+pLkyL2DMQUF0odM=\");\n\nconst Ripple = props => {\n  _s2();\n\n  const {\n    duration,\n    color\n  } = props;\n  const [rippleArray, setRippleArray] = useState([]);\n  useDebouncedRippleCleanUp(rippleArray.length, duration, () => {\n    setRippleArray([]);\n  });\n\n  const addRipple = event => {\n    const rippleContainer = event.currentTarget.getBoundingClientRect();\n    const size = rippleContainer.width > rippleContainer.height ? rippleContainer.width : rippleContainer.height;\n    const x = event.pageX - rippleContainer.x - size / 2;\n    const y = event.pageY - rippleContainer.y - size / 2;\n    const newRipple = {\n      x,\n      y,\n      size\n    };\n    setRippleArray([...rippleArray, newRipple]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(RippleContainer, {\n    duration: duration,\n    color: color,\n    onMouseDown: addRipple,\n    children: rippleArray.length > 0 && rippleArray.map((ripple, index) => {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          top: ripple.y,\n          left: ripple.x,\n          width: ripple.size,\n          height: ripple.size\n        }\n      }, \"span\" + index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(Ripple, \"GDU8SRQccAPw+1mD6gkaAvSOwVI=\", false, function () {\n  return [useDebouncedRippleCleanUp];\n});\n\n_c = Ripple;\nRipple.propTypes = {\n  duration: PropTypes.number,\n  color: PropTypes.string\n};\nRipple.defaultProps = {\n  duration: 850,\n  color: \"#fff\"\n};\nexport default Ripple;\n\nvar _c;\n\n$RefreshReg$(_c, \"Ripple\");","map":{"version":3,"sources":["C:/webabdan/apps/src/rip/Ripple.js"],"names":["React","useState","useLayoutEffect","RippleContainer","PropTypes","useDebouncedRippleCleanUp","rippleCount","duration","cleanUpFunction","bounce","clearTimeout","setTimeout","Ripple","props","color","rippleArray","setRippleArray","length","addRipple","event","rippleContainer","currentTarget","getBoundingClientRect","size","width","height","x","pageX","y","pageY","newRipple","map","ripple","index","top","left","propTypes","number","string","defaultProps"],"mappings":"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","sourcesContent":["import React, { useState, useLayoutEffect } from \"react\";\nimport { RippleContainer } from \"./Ripple.styled\";\nimport PropTypes from \"prop-types\";\n\nconst useDebouncedRippleCleanUp = (rippleCount, duration, cleanUpFunction) => {\n  useLayoutEffect(() => {\n    let bounce = null;\n    if (rippleCount > 0) {\n      clearTimeout(bounce);\n\n      bounce = setTimeout(() => {\n        cleanUpFunction();\n        clearTimeout(bounce);\n      }, duration * 4);\n    }\n\n    return () => clearTimeout(bounce);\n  }, [rippleCount, duration, cleanUpFunction]);\n};\n\nconst Ripple = props => {\n  const { duration, color } = props;\n  const [rippleArray, setRippleArray] = useState([]);\n\n  useDebouncedRippleCleanUp(rippleArray.length, duration, () => {\n    setRippleArray([]);\n  });\n\n  const addRipple = event => {\n    const rippleContainer = event.currentTarget.getBoundingClientRect();\n    const size =\n      rippleContainer.width > rippleContainer.height\n        ? rippleContainer.width\n        : rippleContainer.height;\n    const x = event.pageX - rippleContainer.x - size / 2;\n    const y = event.pageY - rippleContainer.y - size / 2;\n    const newRipple = {\n      x,\n      y,\n      size\n    };\n\n    setRippleArray([...rippleArray, newRipple]);\n  };\n\n  return (\n    <RippleContainer duration={duration} color={color} onMouseDown={addRipple}>\n      {rippleArray.length > 0 &&\n        rippleArray.map((ripple, index) => {\n          return (\n            <span\n              key={\"span\" + index}\n              style={{\n                top: ripple.y,\n                left: ripple.x,\n                width: ripple.size,\n                height: ripple.size\n              }}\n            />\n          );\n        })}\n    </RippleContainer>\n  );\n};\n\nRipple.propTypes = {\n  duration: PropTypes.number,\n  color: PropTypes.string\n};\n\nRipple.defaultProps = {\n  duration: 850,\n  color: \"#fff\"\n};\n\nexport default Ripple;\n"]},"metadata":{},"sourceType":"module"}